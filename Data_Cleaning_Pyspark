import sys
from awsglue.transforms import *
from awsglue.utils import getResolvedOptions
from pyspark.context import SparkContext
from awsglue.context import GlueContext
from awsglue.job import Job

## @params: [TempDir, JOB_NAME]
args = getResolvedOptions(sys.argv, ['TempDir','JOB_NAME'])

sc = SparkContext()
glueContext = GlueContext(sc)
spark = glueContext.spark_session
job = Job(glueContext)
job.init(args['JOB_NAME'], args)
## @type: DataSource
## @args: [database = "realtor-db", table_name = "mydemoproj2622", transformation_ctx = "datasource0"]
## @return: datasource0
## @inputs: []
datasource0 = glueContext.create_dynamic_frame.from_catalog(database = "realtor-db", table_name = "mydemoproj2622", transformation_ctx = "datasource0")
## @type: ApplyMapping
## @args: [mapping = [("regionname-1", "string", "regionname-1", "string"), ("state-1", "string", "state-1", "string"), ("date-1", "string", "date-1", "string"), ("population", "long", "population", "long"), ("regionid", "long", "regionid", "long"), ("sizerank", "long", "sizerank", "long"), ("regiontype", "string", "regiontype", "string"), ("regionname", "string", "regionname", "string"), ("state", "string", "state", "string"), ("date", "string", "date", "string"), ("postal_code", "long", "postal_code", "long"), ("median_listing_price", "long", "median_listing_price", "long"), ("median_listing_price_mm", "double", "median_listing_price_mm", "double"), ("median_listing_price_yy", "double", "median_listing_price_yy", "double"), ("active_listing_count", "long", "active_listing_count", "long"), ("active_listing_count_mm", "double", "active_listing_count_mm", "double"), ("active_listing_count_yy", "double", "active_listing_count_yy", "double"), ("median_days_on_market", "long", "median_days_on_market", "long"), ("median_days_on_market_mm", "double", "median_days_on_market_mm", "double"), ("median_days_on_market_yy", "double", "median_days_on_market_yy", "double"), ("new_listing_count", "long", "new_listing_count", "long"), ("new_listing_count_mm", "double", "new_listing_count_mm", "double"), ("new_listing_count_yy", "double", "new_listing_count_yy", "double"), ("price_increased_count", "long", "price_increased_count", "long"), ("price_increased_count_mm", "long", "price_increased_count_mm", "long"), ("price_increased_count_yy", "long", "price_increased_count_yy", "long"), ("price_reduced_count", "long", "price_reduced_count", "long"), ("price_reduced_count_mm", "double", "price_reduced_count_mm", "double"), ("price_reduced_count_yy", "double", "price_reduced_count_yy", "double"), ("pending_listing_count", "long", "pending_listing_count", "long"), ("pending_listing_count_mm", "double", "pending_listing_count_mm", "double"), ("pending_listing_count_yy", "double", "pending_listing_count_yy", "double"), ("median_listing_price_per_square_foot", "double", "median_listing_price_per_square_foot", "double"), ("median_listing_price_per_square_foot_mm", "double", "median_listing_price_per_square_foot_mm", "double"), ("median_listing_price_per_square_foot_yy", "double", "median_listing_price_per_square_foot_yy", "double"), ("median_square_feet", "long", "median_square_feet", "long"), ("median_square_feet_mm", "double", "median_square_feet_mm", "double"), ("median_square_feet_yy", "double", "median_square_feet_yy", "double"), ("average_listing_price", "double", "average_listing_price", "double"), ("average_listing_price_mm", "double", "average_listing_price_mm", "double"), ("average_listing_price_yy", "double", "average_listing_price_yy", "double"), ("total_listing_count", "long", "total_listing_count", "long"), ("total_listing_count_mm", "double", "total_listing_count_mm", "double"), ("total_listing_count_yy", "double", "total_listing_count_yy", "double"), ("pending_ratio", "double", "pending_ratio", "double"), ("pending_ratio_mm", "double", "pending_ratio_mm", "double"), ("pending_ratio_yy", "double", "pending_ratio_yy", "double")], transformation_ctx = "applymapping1"]
## @return: applymapping1
## @inputs: [frame = datasource0]
applymapping1 = ApplyMapping.apply(frame = datasource0, mappings = [("regionname-1", "string", "regionname-1", "string"), ("state-1", "string", "state-1", "string"), ("date-1", "string", "date-1", "string"), ("population", "long", "population", "long"), ("regionid", "long", "regionid", "long"), ("sizerank", "long", "sizerank", "long"), ("regiontype", "string", "regiontype", "string"), ("regionname", "string", "regionname", "string"), ("state", "string", "state", "string"), ("date", "string", "date", "string"), ("postal_code", "long", "postal_code", "long"), ("median_listing_price", "long", "median_listing_price", "long"), ("median_listing_price_mm", "double", "median_listing_price_mm", "double"), ("median_listing_price_yy", "double", "median_listing_price_yy", "double"), ("active_listing_count", "long", "active_listing_count", "long"), ("active_listing_count_mm", "double", "active_listing_count_mm", "double"), ("active_listing_count_yy", "double", "active_listing_count_yy", "double"), ("median_days_on_market", "long", "median_days_on_market", "long"), ("median_days_on_market_mm", "double", "median_days_on_market_mm", "double"), ("median_days_on_market_yy", "double", "median_days_on_market_yy", "double"), ("new_listing_count", "long", "new_listing_count", "long"), ("new_listing_count_mm", "double", "new_listing_count_mm", "double"), ("new_listing_count_yy", "double", "new_listing_count_yy", "double"), ("price_increased_count", "long", "price_increased_count", "long"), ("price_increased_count_mm", "long", "price_increased_count_mm", "long"), ("price_increased_count_yy", "long", "price_increased_count_yy", "long"), ("price_reduced_count", "long", "price_reduced_count", "long"), ("price_reduced_count_mm", "double", "price_reduced_count_mm", "double"), ("price_reduced_count_yy", "double", "price_reduced_count_yy", "double"), ("pending_listing_count", "long", "pending_listing_count", "long"), ("pending_listing_count_mm", "double", "pending_listing_count_mm", "double"), ("pending_listing_count_yy", "double", "pending_listing_count_yy", "double"), ("median_listing_price_per_square_foot", "double", "median_listing_price_per_square_foot", "double"), ("median_listing_price_per_square_foot_mm", "double", "median_listing_price_per_square_foot_mm", "double"), ("median_listing_price_per_square_foot_yy", "double", "median_listing_price_per_square_foot_yy", "double"), ("median_square_feet", "long", "median_square_feet", "long"), ("median_square_feet_mm", "double", "median_square_feet_mm", "double"), ("median_square_feet_yy", "double", "median_square_feet_yy", "double"), ("average_listing_price", "double", "average_listing_price", "double"), ("average_listing_price_mm", "double", "average_listing_price_mm", "double"), ("average_listing_price_yy", "double", "average_listing_price_yy", "double"), ("total_listing_count", "long", "total_listing_count", "long"), ("total_listing_count_mm", "double", "total_listing_count_mm", "double"), ("total_listing_count_yy", "double", "total_listing_count_yy", "double"), ("pending_ratio", "double", "pending_ratio", "double"), ("pending_ratio_mm", "double", "pending_ratio_mm", "double"), ("pending_ratio_yy", "double", "pending_ratio_yy", "double")], transformation_ctx = "applymapping1")
## @type: ResolveChoice
## @args: [choice = "make_cols", transformation_ctx = "resolvechoice2"]
## @return: resolvechoice2
## @inputs: [frame = applymapping1]
resolvechoice2 = ResolveChoice.apply(frame = applymapping1, choice = "make_cols", transformation_ctx = "resolvechoice2")
## @type: DropFields
## @args: [paths = ['RegionName-1','State-1','Date-1','RegionID','RegionType','median_listing_price_mm','median_listing_price_yy','active_listing_count_mm','active_listing_count_yy','median_days_on_market_mm','median_days_on_market_yy','new_listing_count_mm','new_listing_count_yy','price_increased_count','price_increased_count_mm','price_increased_count_yy','price_reduced_count','price_reduced_count_mm','price_reduced_count_yy','pending_listing_count_mm','pending_listing_count_yy','median_listing_price_per_square_foot_mm','median_listing_price_per_square_foot_yy','median_square_feet_mm','median_square_feet_yy','average_listing_price_mm','average_listing_price_yy','total_listing_count_mm','total_listing_count_yy','pending_ratio_mm','pending_ratio_yy'], transformation_ctx = "dropfields0"]
## @return: dropfields0
## @inputs: [frame = resolvechoice2]
dropfields0= DropFields.apply(frame = resolvechoice2, paths = ['RegionName-1','State-1','Date-1','RegionID','RegionType','median_listing_price_mm','median_listing_price_yy','active_listing_count_mm','active_listing_count_yy','median_days_on_market_mm','median_days_on_market_yy','new_listing_count_mm','new_listing_count_yy','price_increased_count','price_increased_count_mm','price_increased_count_yy','price_reduced_count','price_reduced_count_mm','price_reduced_count_yy','pending_listing_count_mm','pending_listing_count_yy','median_listing_price_per_square_foot_mm','median_listing_price_per_square_foot_yy','median_square_feet_mm','median_square_feet_yy','average_listing_price_mm','average_listing_price_yy','total_listing_count_mm','total_listing_count_yy','pending_ratio_mm','pending_ratio_yy'], transformation_ctx = "dropfields0")
## @type: DropNullFields
## @args: [transformation_ctx = "dropnullfields3"]
## @return: dropnullfields3
## @inputs: [frame = dropfields0]
dropnullfields3 = DropNullFields.apply(frame = dropfields0, transformation_ctx = "dropnullfields3")
## @type: DataSink
## @args: [catalog_connection = "sowmya", connection_options = {"dbtable": "mydemoproj2622", "database": "dev"}, redshift_tmp_dir = TempDir, transformation_ctx = "datasink4"]
## @return: datasink4
## @inputs: [frame = dropnullfields3]
datasink4 = glueContext.write_dynamic_frame.from_jdbc_conf(frame = dropnullfields3, catalog_connection = "sowmya", connection_options = {"dbtable": "mydemoproj2622", "database": "dev"}, redshift_tmp_dir = args["TempDir"], transformation_ctx = "datasink4")
job.commit()